# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Docker CI with Maven

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    - develop
    - main
  workflow_dispatch:

jobs:

  setup-docker-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: D√©finir le tag Docker en fonction de la branche
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "tag=pre-prod" >> $GITHUB_OUTPUT
          else
            echo "tag=pre-prod" >> $GITHUB_OUTPUT
          fi

  build-and-deploy-image:

    runs-on: ubuntu-latest
    needs: setup-docker-tag
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout du d√©p√¥t
      - uses: actions/checkout@v4

      - name: Valider le tag g√©n√©r√©
        run: |
          TAG="${{ needs.setup-docker-tag.outputs.docker_tag }}"
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
            echo "Invalid tag format: $TAG"
            exit 1
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Connexion √† GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Activer Buildx
        uses: docker/setup-buildx-action@v2



      - name: Construire et pousser l'image Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: ghcr.io/gueyeabdoulaye/cosf_front:${{ needs.setup-docker-tag.outputs.docker_tag || 'latest' }}


      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6



# deploy:
#   needs: build-and-deploy-image
#   runs-on: ubuntu-latest
#   steps:
#     - name: Checkout du d√©p√¥t
#       uses: actions/checkout@v4

#     - name: D√©duire l'environnement
#       id: env
#       run: |
#         if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
#           echo "env=prod" >> $GITHUB_OUTPUT
#         else
#           echo "env=pre-prod" >> $GITHUB_OUTPUT
#         fi

#     - name: Cr√©er fichier .env
#       run: |
#           cat <<EOF > .env
#           # ========================
#           # üì¶ ENVIRONNEMENT
#           # ========================
#           ENV=${{ steps.env.outputs.env }}

#     - name: Pr√©parer cl√© SSH
#       run: |
#         echo "${{ secrets.RASPBERRY_SSH_KEY }}" > private_key.pem
#         chmod 600 private_key.pem

#     - name: üõ†Ô∏è Pr√©parer structure serveur distante
#       run: |
#         ssh -i private_key.pem -o StrictHostKeyChecking=no \
#           ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} "\
#             mkdir -p ~/front/${{ steps.env.outputs.env }}/nginx"

#     - name: üöö Copier les fichiers sur le Raspberry
#       run: |
#         run: |
#         # Copier les fichiers dans le dossier de l'environnement
#         scp -i private_key.pem -o StrictHostKeyChecking=no .env \
#           docker-compose.yml \
#           ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }}:~/front/${{ steps.env.outputs.env }}/

#         # Copier le fichier front.conf dans le dossier nginx d√©di√©
#         scp -i private_key.pem -o StrictHostKeyChecking=no nginx/front.conf \
#           ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }}:~/front/${{ steps.env.outputs.env }}/nginx/

#         scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh \
#           ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }}:~/front/

#     - name: üöÄ Lancer le d√©ploiement via SSH
#       run: |
#         ssh -i private_key.pem -o StrictHostKeyChecking=no \
#           ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} \
#           "cd ~/front && chmod +x deploy.sh && ./deploy.sh ${{ steps.env.outputs.env }}"